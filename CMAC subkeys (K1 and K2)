from Crypto.Cipher import AES

def left_shift(b):
    val = int.from_bytes(b, 'big') << 1
    val &= (1 << 128) - 1
    return val.to_bytes(16, 'big')

def xor(a, b):
    return bytes(x ^ y for x, y in zip(a, b))

def cmac_subkeys(key):
    Rb = b'\x00'*15 + b'\x87'
    L = AES.new(key, AES.MODE_ECB).encrypt(b'\x00'*16)
    K1 = left_shift(L) if L[0] & 0x80 == 0 else xor(left_shift(L), Rb)
    K2 = left_shift(K1) if K1[0] & 0x80 == 0 else xor(left_shift(K1), Rb)
    return K1, K2

k1, k2 = cmac_subkeys(b'0123456789abcdef')
print("K1:", k1.hex())
print("K2:", k2.hex())
